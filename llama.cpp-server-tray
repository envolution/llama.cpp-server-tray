#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import sys
import subprocess
from pathlib import Path
from PySide6.QtWidgets import QApplication, QSystemTrayIcon, QMenu, QMessageBox
from PySide6.QtGui import QIcon, QAction
from PySide6.QtCore import QTimer

# Paths to icons
ICON_RUNNING = "llama_service_running.png"
ICON_STOPPED = "llama_service.png"

SERVICE_NAME = "llama.cpp.service"
APP_NAME = "llama_tray_service"
AUTOSTART_DIR = Path.home() / ".config" / "autostart"
AUTOSTART_FILE = AUTOSTART_DIR / f"{APP_NAME}.desktop"

def is_service_running():
    """Check if the systemd service is active."""
    try:
        result = subprocess.run(
            ["systemctl", "is-active", SERVICE_NAME],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        return result.stdout.strip() == "active"
    except Exception as e:
        print(f"Error checking service status: {e}")
        return False

def start_service():
    """Start the systemd service."""
    try:
        subprocess.run(
            ["systemctl", "start", SERVICE_NAME],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    except subprocess.CalledProcessError as e:
        print(f"Error starting service: {e.stderr}")

def stop_service():
    """Stop the systemd service."""
    try:
        subprocess.run(
            ["systemctl", "stop", SERVICE_NAME],
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    except subprocess.CalledProcessError as e:
        print(f"Error stopping service: {e.stderr}")

def create_autostart_entry():
    """Create a .desktop file for autostart."""
    if not AUTOSTART_DIR.exists():
        AUTOSTART_DIR.mkdir(parents=True)
    with open(AUTOSTART_FILE, "w") as f:
        f.write(
            f"""[Desktop Entry]
Type=Application
Exec={sys.executable} {sys.argv[0]}
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name={APP_NAME}
Comment=Tray application for llama.cpp.service
"""
        )

def remove_autostart_entry():
    """Remove the autostart .desktop file."""
    if AUTOSTART_FILE.exists():
        AUTOSTART_FILE.unlink()

def is_autostart_enabled():
    """Check if the autostart .desktop file exists."""
    return AUTOSTART_FILE.exists()

class TrayIcon(QSystemTrayIcon):
    def __init__(self):
        super().__init__()
        self.menu = QMenu()

        # Actions
        self.start_action = QAction("Start Service")
        self.stop_action = QAction("Stop Service")
        self.autostart_action = QAction("Auto-Run at Startup")
        self.autostart_action.setCheckable(True)
        self.quit_action = QAction("Quit")

        # Add actions to menu
        self.menu.addAction(self.start_action)
        self.menu.addAction(self.stop_action)
        self.menu.addSeparator()
        self.menu.addAction(self.autostart_action)
        self.menu.addSeparator()
        self.menu.addAction(self.quit_action)

        # Connect actions
        self.start_action.triggered.connect(self.handle_start)
        self.stop_action.triggered.connect(self.handle_stop)
        self.autostart_action.triggered.connect(self.toggle_autostart)
        self.quit_action.triggered.connect(self.handle_quit)

        self.setContextMenu(self.menu)

        # Timer to periodically check service status
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_icon)
        self.timer.start(5000)  # Check every 5 seconds

        # Initialize icon state
        self.autostart_action.setChecked(is_autostart_enabled())
        self.update_icon()

    def handle_start(self):
        start_service()
        self.update_icon()

    def handle_stop(self):
        stop_service()
        self.update_icon()

    def toggle_autostart(self):
        if self.autostart_action.isChecked():
            create_autostart_entry()
        else:
            remove_autostart_entry()

    def handle_quit(self):
        if is_service_running():
            response = QMessageBox.question(
                None,
                "Service Running",
                "Are you sure you want to quit without shutting down the service?",
                QMessageBox.Yes | QMessageBox.No,
            )
            if response == QMessageBox.No:
                return
        self.timer.stop()
        QApplication.quit()

    def update_icon(self):
        if is_service_running():
            self.setIcon(QIcon.fromTheme(ICON_RUNNING))
        else:
            self.setIcon(QIcon.fromTheme(ICON_STOPPED))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)

    # Create the tray icon
    tray_icon = TrayIcon()
    tray_icon.setToolTip("Llama.cpp Service Control")
    tray_icon.show()

    # Start the event loop
    sys.exit(app.exec())
